#!/usr/bin/env ruby

require 'optparse'
require 'time'
require_relative 'lib/bash_utils'
require_relative 'lib/current_time'
require_relative 'lib/date_time_utils'
require_relative 'lib/file_reporter'
require_relative 'lib/time_tracker'
require_relative 'lib/screen_notifier'

options = OptionParser.new do |opts|
  opts.banner = "Usage: #{opts.program_name} [options] REPORT_FILE"

  opts.on('--dont-ignore-teamviewer',
          'Do not ignore TeamViewer sessions while tracking working time') do
    @dont_ignore_teamviewer = true
  end

  opts.on('-d', '--dynamic',
          'Use dynamic working day limit. Not supported for --genmon.') do
    @dynamic = true
  end

  opts.on('--genmon', 'Print current progress for xfce4-genmon-plugin') do
    @genmon = true
  end

  opts.on('-h', '--help', 'Show this message') do
    puts opts
    exit
  end

  opts.on('--initial-started=time',
          'Set initial "Started" time (HH:MM)') do |time|
    @initial_first_unblank = Time.strptime(time, '%H:%M')
  end

  opts.on('--initial-total-per-week=time',
          'Set initial "Total per week" time (HH:MM)') do |time|
    @initial_total_per_week = DateTimeUtils.to_seconds(time)
  end

  opts.on('-m', '--message=text',
          'Set a message of the "Go home" notification') do |text|
    @notification = text
  end

  opts.on('--verbose', 'Print verbose information') do
    @verbose = true
  end
end

begin
  options.parse!
rescue OptionParser::ParseError
  puts options
  exit 1
end

REPORT_FILE = ARGV[-1]
unless REPORT_FILE
  puts options
  exit 1
end

CURRENT_TIME_FILE = "#{REPORT_FILE}.current".freeze
current_time = CurrentTime.new(CURRENT_TIME_FILE)

if @genmon
  require_relative 'lib/genmon'
  puts Genmon.new(current_time.seconds).progress
  exit
end

time_tracker = TimeTracker.new(dont_ignore_teamviewer: @dont_ignore_teamviewer,
                               dynamic: @dynamic,
                               initial_first_unblank: @initial_first_unblank,
                               initial_total_per_week: @initial_total_per_week)

file_reporter = FileReporter.new(REPORT_FILE)
screen_notifier = ScreenNotifier.new(@notification)

if @verbose
  time_tracker.on :new_xscreensaver_command do |data|
    puts "#{data[:command]}\t#{data[:time]}"
    puts "teamviewer_session? == #{data[:teamviewer_session?]} || "\
         '@was_unlocked_by_teamviewer == '\
         "#{data[:was_unlocked_by_teamviewer].inspect} || "\
         "@was_locked == #{data[:was_locked].inspect}"
  end
  time_tracker.on :lock do |data|
    puts "last_lock = #{data[:last_lock]}"
  end
  time_tracker.on :new_day do |data|
    puts 'new day'
    puts "first_unblank = #{data[:first_unblank]}"
  end
  time_tracker.on :new_week do
    puts 'new week'
  end
  time_tracker.on :set_limit_per_week do |data|
    puts "remaining working days of a week = #{data[:remaining_working_days]}"
  end
  time_tracker.on :fix_days_gap do |data|
    puts "skip day gap: #{data[:days_gap]}"
  end
end

time_tracker.on :run do |data|
  file_reporter.print_started(data[:first_unblank])
end
time_tracker.on :before_new_day do |data|
  file_reporter.print_finished(data[:first_unblank],
                               data[:last_lock],
                               data[:total_per_week])
end
time_tracker.on :new_day do |data|
  file_reporter.print_started(data[:first_unblank])
end

time_tracker.on :go_home do
  screen_notifier.notify
end
time_tracker.on :refresh_current_time do |data|
  current_time.seconds = data[:current_time_sec]
end

time_tracker.run
